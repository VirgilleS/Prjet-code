import numpy as np
import matplotlib.pyplot as plt
from numba import jit 

### PARAMÈTRES ###

ni, nj = 20, 20 #nombre d'oscillateurs sur les lignes, colonnes
n = ni*nj
omega_moy = 1 #pulsation moyenne des particules
delta_omega = 0.5 #écart type des pulsations
K = 15
K_N=K/n #constante de couplage
delta_t = 0.001 #pas du temps
temps_tot = 75 #temps d'observation

### CONDITIONS INITIALES ###

theta_ini = np.random.uniform(0, 2*np.pi,(ni,nj)) 
#positions aléatoirement réparties sur le cercle

omega_ini=np.array(np.random.normal(omega_moy, delta_omega, size=(ni,nj)))
#pulsations réparties comme une distribution gaussienne

### RÉSOLUTION PAR LA MÉTHODE D'EULER ###

### Fonction d'évolution ###

@jit(nopython=True)
def système_reseau(omega_ini, theta, couplage, delta_t, ni, nj):
    """  Calcule le pas suivant selon l'équation dynamique de sproches voisins 2D : réseaux """
    
    # variables 
    
    
    
    d_theta = np.zeros((ni,nj))
    
    for i in range(ni) :
        for j in range(nj) :
            d_theta[i,j] = omega_ini[i,j] + couplage*( fonction_couplage(theta[i,j+1]-theta[i,j] - dephasage) + fonction_couplage(theta[i,j-1]-theta[i,j] - dephasage) + fonction_couplage(theta[i+1,j]-theta[i,j] - dephasage) + fonction_couplage(theta[i-1,j]-theta[i,j] - dephasage))
             
    theta += d_theta*delta_t
             
    return theta
            
            

def systeme_force(omega_ini,theta,couplage,delta_t) :
    """ Calcule le pas suivant ou un oscillateur a une vitesse angulaire forcée : il n'unteragit avec personne """
    d_theta = np.zeros(n)
    
    for i in range(n) :
        if i != n //2 :
            d_theta[i] = omega_ini[i] + np.sum(couplage*(np.sin(theta-np.ones(n)*theta[i])))
        else :
            d_theta[i] = 5
    theta = theta + d_theta*delta_t
    return theta

### Évolution du système au cours du temps ###
def calcul_trajectoire(fin,dt, theta_initial, systeme, couplage ) :

    nb_pas = int(fin// dt) #Nombre total de pas

    moy_dif = np.empty([n, nb_pas],float)

    temps_fais = 0 #initialisation du temps

    t = np.empty(nb_pas,float) #tableau contenant tous les temps
    
    # paramètre d'ordre 
    parametre_ordre = []
    
    # configuration du système à t= 0
    theta = theta_initial
    
    # save theta
    save_theta = np.zeros((nb_pas+1,ni,nj))
    save_theta[0] = theta
    
    # tableau des oscillateurs ramenés à une liste
    theta_liste = np.ndarray.flatten(theta)

    for k in range(nb_pas):
        
        moy_dif[:,k] = np.cos(theta_liste[:]) - np.mean(np.cos(theta_liste))
        
        #Invocation de la fonction évolution
        theta = systeme(omega_ini, theta, couplage, dt, ni, nj) 
        
        # actualiste le tableau des theta aplatis
        theta_liste = np.ndarray.flatten(theta)
        
        # calcul du paramètre d'ordre 
        parametre_ordre.append( np.sqrt( np.mean(np.cos(theta_liste))**2 + np.mean(np.sin(theta_liste))**2 ) )
        
        # sauvegarde de la matrice theta au temps kdt
        save_theta[k+1,:,:] = np.cos(theta)
        
        temps_fais = temps_fais + dt #Temps fait
        t[k] = temps_fais #Liste de la totalité des temps
    
    return save_theta, np.array(parametre_ordre), moy_dif, np.array(t)

theta_temps, param_ordre, moyenne_diff , t = calcul_trajectoire(temps_tot,delta_t, theta_ini, système_reseau, couplage = K/4 )

for i in range(n) :
    plt.plot(t,moyenne_diff[i,:])
plt.show()

plt.plot(t,param_ordre)
plt.show()
# valeurs de couplage à tester
essai_k = list(range(0,20))

# paramètres d'ordre à calculer
r_k = []

# paramètre d'ordre en fonction de k pour les 20% pas de temps de fin 
for k in essai_k :
    _,param_ordre,_,_ = calcul_trajectoire(temps_tot,delta_t, theta_ini, système_reseau, couplage = k/4 )
    r_k.append( np.mean( param_ordre[t>55])  )
    print('k=',k)
plt.plot(essai_k,r_k)
plt.show()

### Colour plot 2D

#X = np.linspace(0,nj-1,nj)
#Y = np.linspace(0,ni-1,ni)

#Z = theta_temps[0]

#plt.contourf(X, Y, Z, 10)
