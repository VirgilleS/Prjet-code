import numpy as np
import matplotlib.pyplot as plt
from numba import jit


### PARAMÈTRES ###

n = 2  # nombre de particules
omega_moy = 1  # pulsation moyenne des particules
delta_omega = 1  # écart type des pulsations
K = 5
K_N = K / n  # constante de couplage
delta_t = 0.001  # pas du temps
temps_tot = 20  # temps d'observation
D = 0 #bruit

### CONDITIONS INITIALES ###

theta = np.random.uniform(0, 2 * np.pi, n)
# positions aléatoirement réparties sur le cercle

omega_ini = np.array(np.random.normal(omega_moy, delta_omega, size=(n)))
# pulsations réparties comme une distribution gaussienne


### RÉSOLUTION PAR LA MÉTHODE D'EULER ###

### Fonction d'évolution ###

d_theta = np.zeros(n)

@jit(nopython = True)
def système_plus1(omega_ini, theta, K_N, delta_t, n, R, d_theta):
    for i in range(n):
        d_theta[i] = omega_ini[i] + np.sum(K_N*(np.sin(theta-np.ones(n)*theta[i])))
    theta = theta + d_theta*delta_t + np.sqrt(D*delta_t)*R
    return theta

### Évolution du système au cours du temps ###

R=np.array(np.random.normal( 0, 1, size=(n)))
nb_pas = int(temps_tot // delta_t)  # Nombre total de pas
moy_dif = np.empty([n, nb_pas], float)
r = np.empty(nb_pas, float)
temps_fais = 0  # initialisation du temps
t = np.empty(nb_pas, float)  # tableau contenant tous les temps

for k in range(nb_pas):
    moy_dif[:, k] = np.cos(theta[:]) - np.mean(np.cos(theta))

    theta = système_plus1(omega_ini, theta, K_N, delta_t, n, R, d_theta)
    # Invocation de la fonction évolution

    temps_fais = temps_fais + delta_t  # Temps fait
    t[k] = temps_fais  # Liste de la totalité des temps
    r[k] = np.sqrt(np.mean(np.cos(theta)) ** 2 + np.mean(np.sin(theta)) ** 2)

for i in range(n):
    plt.plot(t, moy_dif[i, :])
plt.xlabel("Temps (s)")
plt.ylabel("phase de chaque oscillateurs")
plt.show()
