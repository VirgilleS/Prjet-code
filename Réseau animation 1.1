import numpy as np
import matplotlib.pyplot as plt
from numba import jit 
from matplotlib import animation

### PARAMÈTRES ###

ni, nj = 80, 80 #nombre d'oscillateurs sur les lignes, colonnes
n = ni*nj
omega_moy = 1 #pulsation moyenne des particules
delta_omega = 0.1 #écart type des pulsations
K = 10
K_N=K/n #constante de couplage
delta_t = 0.001 #pas du temps
temps_tot = 50 #temps d'observation

saut = 10 # saut de pas de temps sélectionnés

### CONDITIONS INITIALES ###

#positions aléatoirement réparties sur le cercle
theta_ini = np.random.uniform(0, 2*np.pi,(ni,nj))

#pulsations réparties comme une distribution gaussienne
omega_ini = np.array(np.random.normal(omega_moy, delta_omega, size=(ni,nj)))

### RÉSOLUTION PAR LA MÉTHODE D'EULER ###

### Fonction d'évolution ###

@jit(nopython=True)
def système_reseau(omega_ini, theta, couplage, delta_t, ni, nj):
    """  Calcule le pas suivant selon l'équation dynamique des proches voisins 2D : réseaux """
    
    d_theta = np.zeros((ni,nj))
    
    # conditions périodiques aux bords sur les colonnes 
    for j in range(nj) :
        d_theta[0,j] = omega_ini[0,j] + couplage*( np.sin(theta[-1,j] - theta[0,j]) + np.sin(theta[1,j] - theta[0,j]) )
        d_theta[-1,j] = omega_ini[-1,j] + couplage*( np.sin(theta[0,j] - theta[-1,j]) + np.sin(theta[-2,j] - theta[-1,j]) ) 
        
    # conditions périodiques aux bords sur les lignes 
    for i in range(ni) :
        if i == 0 or i == ni - 1 :
            d_theta[i,0] +=  couplage*( np.sin(theta[i,-1] - theta[i,0]) + np.sin(theta[i,1] - theta[i,0]) )
            d_theta[i,-1] += couplage*( np.sin(theta[i,0] - theta[i,-1]) + np.sin(theta[i,-2] - theta[i,-1]) )
            
        else:
            d_theta[i,0] += omega_ini[1,j] + couplage*( np.sin(theta[i,-1] - theta[i,0]) + np.sin(theta[i,1] - theta[i,0]) )
            d_theta[i,j] += omega_ini[-1,j] + couplage*( np.sin(theta[i,0] - theta[i,-1]) + np.sin(theta[i,-2] - theta[i,-1]) )
    
    for i in range(1,ni-1) :
        for j in range(1,nj-1) :
             d_theta[i,j] = omega_ini[i,j] + couplage*( np.sin(theta[i+1,j]-theta[i,j]) + np.sin(theta[i-1,j]-theta[i,j]))
             d_theta[i,j] += couplage*( np.sin(theta[i,j+1]-theta[i,j]) + np.sin(theta[i,j-1]-theta[i,j]))
             
    theta += d_theta*delta_t
             
    return theta

@jit(nopython = True)
def full_interaction(omega_ini,theta,couplage,delta_t, ni, nj) :
    """ Calcule le pas suivant où chaque oscillateur est couplé avec tous les autres """
    d_theta = np.zeros((ni,nj))
    
    for i in range(ni):
        for j in range(nj) :
            d_theta[i,j] = omega_ini[i,j] + np.sum(couplage*( np.sin(theta - np.ones((ni,nj))*theta[i,j])) )
        
    theta = theta + d_theta*delta_t
    return theta
            

def systeme_force(omega_ini,theta,couplage,delta_t) :
    """ Calcule le pas suivant ou un oscillateur a une vitesse angulaire forcée : il n'unteragit avec personne """
    d_theta = np.zeros(n)
    
    for i in range(n) :
        if i != n //2 :
            d_theta[i] = omega_ini[i] + np.sum(couplage*(np.sin(theta-np.ones(n)*theta[i])))
        else :
            d_theta[i] = 5
    theta = theta + d_theta*delta_t
    return theta

### Évolution du système au cours du temps ###
def calcul_trajectoire(fin,dt, theta_initial, systeme, couplage ) :

    nb_pas = int(fin// dt) #Nombre total de pas
    temps_fais = 0 #initialisation du temps

    t = np.zeros(nb_pas,float) #tableau contenant tous les temps

    # configuration du système à t= 0
    theta = theta_initial
    
    # save theta
    save_theta = np.zeros((nb_pas+1,ni,nj))
    save_theta[0] = np.cos(theta)

    for k in range(nb_pas):
        
        #Invocation de la fonction évolution
        theta = systeme(omega_ini, theta, couplage, dt, ni, nj) 
        
        # sauvegarde de la matrice theta au temps kdt
        if k % saut == 0 :
            save_theta[k+1,:,:] = np.cos(theta)
        
        temps_fais = temps_fais + dt #Temps fait
        t[k] = temps_fais #Liste de la totalité des temps
        
        if k % (nb_pas//20) == 0 :
            print(k/nb_pas*100,'%')
    
    t[1:] = t[1:][t[1:] != 0]
    return save_theta, np.array(t)

theta_temps, t = calcul_trajectoire(temps_tot,delta_t, theta_ini, système_reseau, couplage = K/4 )

# filtre les tableaux sautés
theta_temps = np.delete(theta_temps, np.where(~theta_temps.any(axis=1))[0], axis=0)
print(theta_temps.shape)

### Colour plot 2D ANIMATION

x = np.linspace(0,nj-1,nj)
y=np.linspace(0,nj-1,ni)
# Set the figure size 
plt.rcParams["figure.figsize"] = [7.00, 3.50] 
plt.rcParams["figure.autolayout"] = True # Random data for the contour plot 
data = theta_temps # Create a figure and a set of subplots 
fig, ax = plt.subplots() # Method to change the contour data points 
def animate(i): 
    ax.clear() 
    ax.contourf(data[i,:,:],15,cmap='plasma')
#    ax.pcolormesh(x,y,data[i,:, :],cmap='plasma') 
# Call animate method 
ani = animation.FuncAnimation(fig, animate, len(theta_temps[:,0,0]), interval= 0.005, blit=False) # Display the plot 
fig.colorbar(ax.pcolormesh(x,y,data[0,:, :],cmap='plasma') , ax=ax)
fig.suptitle('Réseau Kuramoto 2D avec {0} x {1} oscillateurs'.format(ni,nj))
plt.show()
